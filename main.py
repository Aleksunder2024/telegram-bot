import os
import random
import json
import requests
from datetime import datetime, time, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters

# ====== Telegram ======
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
HF_API_TOKEN = os.environ.get("HF_API_TOKEN")  # Hugging Face API token
DATA_FILE = "user_data.json"

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")

if not HF_API_TOKEN:
    raise ValueError("HF_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")

# ====== –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ======
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        user_data = json.load(f)
else:
    user_data = {}

# ====== –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π ======
articles = {
    "—Å–ø–æ—Ä—Ç": ["https://habr.com/ru/articles/123456/"],
    "–∫–Ω–∏–≥–∏": ["https://example.com/fantasy-world"],
    "–∫—Ä–∏–ø—Ç–∞": ["https://example.com/crypto101"]
}

# ====== –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ ======
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump({"user_data": user_data, "articles": articles}, f, ensure_ascii=False, indent=2)

# ====== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ Hugging Face Inference API ======
def generate_challenge(category: str) -> str:
    url = "https://api-inference.huggingface.co/models/gpt2"
    headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
    prompt = f"–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':"
    response = requests.post(url, headers=headers, json={"inputs": prompt})
    try:
        text = response.json()[0]['generated_text']
        return text.strip()
    except Exception:
        return f"–ó–∞–¥–∞–Ω–∏–µ –¥–ª—è '{category}' –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å."

# ====== –ö–æ–º–∞–Ω–¥—ã ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    if chat_id not in user_data:
        user_data[chat_id] = {"completed": {}, "notify_hour": 10, "daily_count": 2}
        save_data()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ üéØ"
    )

async def add_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π /add_category –Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
    category = context.args[0].lower()
    for chat_id in user_data:
        user_data[chat_id]["completed"].setdefault(category, [])
    save_data()
    await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

async def add_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π /add_challenge –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ–∫—Å—Ç_–∑–∞–¥–∞–Ω–∏—è")
        return
    category = context.args[0].lower()
    text = " ".join(context.args[1:])
    user_data.setdefault(str(update.message.chat_id), {"completed": {}})
    user_data[str(update.message.chat_id)]["completed"].setdefault(category, []).append(text)
    save_data()
    await update.message.reply_text(f"–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    text = update.message.text.lower()
    if chat_id not in user_data:
        user_data[chat_id] = {"completed": {}, "notify_hour": 10, "daily_count": 2}
        save_data()
    if text in user_data[chat_id]["completed"]:
        challenge = generate_challenge(text)
        user_data[chat_id]["completed"][text].append(challenge)
        save_data()
        article = random.choice(articles.get(text, [])) if articles.get(text) else "–ù–µ—Ç —Å—Ç–∞—Ç—å–∏"
        await update.message.reply_text(f"–ß–µ–ª–ª–µ–Ω–¥–∂ ({text}): {challenge}\n–°—Ç–∞—Ç—å—è: {article}")
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /add_category")

# ====== –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ ======
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("add_category", add_category))
app.add_handler(CommandHandler("add_challenge", add_challenge))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# ====== –ó–∞–ø—É—Å–∫ ======
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
