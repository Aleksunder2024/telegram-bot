import os
import random
import json
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

# ====== –¢–æ–∫–µ–Ω—ã ======
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
HF_API_TOKEN = os.environ.get("HF_API_TOKEN")  # Hugging Face API token
DATA_FILE = "user_data.json"

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
if not HF_API_TOKEN:
    raise ValueError("HF_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")

# ====== –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ======
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        user_data = json.load(f)
else:
    user_data = {}

# ====== –ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç–µ–π ======
articles = {
    "—Å–ø–æ—Ä—Ç": ["https://habr.com/ru/articles/123456/"],
    "–∫–Ω–∏–≥–∏": ["https://example.com/fantasy-world"],
    "–∫—Ä–∏–ø—Ç–∞": ["https://example.com/crypto101"]
}

# ====== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ======
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump({"user_data": user_data, "articles": articles}, f, ensure_ascii=False, indent=2)

# ====== –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è fallback ======
templates = {
    "—Å–ø–æ—Ä—Ç": ["–°–¥–µ–ª–∞–π {n} –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π", "–ü—Ä–æ–π–¥–∏ {n} —à–∞–≥–æ–≤", "–ü–ª–∞–Ω–∫–∞ {n} —Å–µ–∫—É–Ω–¥"],
    "–∫–Ω–∏–≥–∏": ["–ü—Ä–æ—á–∏—Ç–∞–π {n} —Å—Ç—Ä–∞–Ω–∏—Ü", "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –∫–Ω–∏–≥—É –∂–∞–Ω—Ä–∞ {genre}"],
    "–∫—Ä–∏–ø—Ç–∞": ["–ü—Ä–æ—á–∏—Ç–∞–π —Å—Ç–∞—Ç—å—é –ø—Ä–æ {coin}", "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ –æ {topic}"]
}

def fallback_challenge(category: str):
    if category not in templates:
        return "–°–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ!"
    template = random.choice(templates[category])
    n = random.randint(5, 20)
    genre = random.choice(["—Ñ—ç–Ω—Ç–µ–∑–∏", "–Ω–∞—É—á–Ω—É—é —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É", "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É"])
    coin = random.choice(["BTC", "ETH", "ADA"])
    topic = random.choice(["DeFi", "NFT", "—Å—Ç–µ–π–∫–∏–Ω–≥"])
    return template.format(n=n, genre=genre, coin=coin, topic=topic)

# ====== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ HF API ======
def generate_challenge(category: str) -> str:
    url = "https://api-inference.huggingface.co/models/EleutherAI/gpt-neo-1.3B"
    headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
    prompt = f"–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':"
    try:
        response = requests.post(url, headers=headers, json={"inputs": prompt}, timeout=10)
        if response.status_code == 200:
            text = response.json()[0].get('generated_text', '').strip()
            if text:
                return text
        # –ï—Å–ª–∏ API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        return fallback_challenge(category)
    except Exception:
        return fallback_challenge(category)

# ====== –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ======
def generate_assistant_hint(user_text: str) -> str:
    url = "https://api-inference.huggingface.co/models/EleutherAI/gpt-neo-1.3B"
    headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
    prompt = (
        f"–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è Telegram-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ–ª–ª–µ–Ω–¥–∂–∏. "
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç: '{user_text}'. "
        f"–û–±—ä—è—Å–Ω–∏, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –∏–ª–∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. "
        f"–î–∞–π –ø–æ–Ω—è—Ç–Ω—É—é –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É."
    )
    try:
        response = requests.post(url, headers=headers, json={"inputs": prompt}, timeout=10)
        if response.status_code == 200:
            text = response.json()[0].get("generated_text", "").strip()
            if text:
                return text
        return "–ü—Ä–æ—Å—Ç–∏, —è –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /help."
    except Exception:
        return "–ü—Ä–æ—Å—Ç–∏, —è –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /help."

# ====== –ö–æ–º–∞–Ω–¥—ã ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    if chat_id not in user_data:
        user_data[chat_id] = {"completed": {}, "notify_hour": 10, "daily_count": 2}
        save_data()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ üéØ\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands = [
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
        "/add_category <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        "/add_challenge <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
        "/categories ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
        "/choose_category ‚Äî –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"
    ]
    await update.message.reply_text("\n".join(commands))

async def add_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π /add_category –Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
    category = context.args[0].lower()
    for chat_id in user_data:
        user_data[chat_id]["completed"].setdefault(category, [])
    save_data()
    await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

async def add_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π /add_challenge –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ–∫—Å—Ç_–∑–∞–¥–∞–Ω–∏—è")
        return
    category = context.args[0].lower()
    text = " ".join(context.args[1:])
    chat_id = str(update.message.chat_id)
    user_data.setdefault(chat_id, {"completed": {}})
    user_data[chat_id]["completed"].setdefault(category, []).append(text)
    save_data()
    await update.message.reply_text(f"–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'!")

async def list_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    if chat_id not in user_data:
        user_data[chat_id] = {"completed": {}, "notify_hour": 10, "daily_count": 2}
    categories = list(user_data[chat_id]["completed"].keys())
    if not categories:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /add_category")
    else:
        await update.message.reply_text("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n" + "\n".join(categories))

async def choose_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    categories = list(user_data[chat_id]["completed"].keys())
    if not categories:
        await update.message.reply_text("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /add_category")
        return
    buttons = [[InlineKeyboardButton(cat, callback_data=cat)] for cat in categories]
    keyboard = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category = query.data
    challenge = generate_challenge(category)
    await query.edit_message_text(f"–ß–µ–ª–ª–µ–Ω–¥–∂ ({category}): {challenge}")

# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ======
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    text = update.message.text.lower()
    categories = list(user_data[chat_id]["completed"].keys())

    # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π ‚Äî –≤—ã–¥–∞—ë–º —á–µ–ª–ª–µ–Ω–¥–∂
    if text in categories:
        challenge = generate_challenge(text)
        await update.message.reply_text(f"–ß–µ–ª–ª–µ–Ω–¥–∂ ({text}): {challenge}")
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        hint = generate_assistant_hint(text)
        await update.message.reply_text(hint)

# ====== –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ ======
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("add_category", add_category))
app.add_handler(CommandHandler("add_challenge", add_challenge))
app.add_handler(CommandHandler("categories", list_categories))
app.add_handler(CommandHandler("choose_category", choose_category))
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# ====== –ó–∞–ø—É—Å–∫ ======
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
