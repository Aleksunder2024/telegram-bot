import os
import asyncio
import random
import json
from datetime import datetime, time, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters

# ====== Hugging Face ======
from transformers import pipeline

# –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞
generator = pipeline("text-generation", model="gpt2")  # –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å

# ====== Telegram ======
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
DATA_FILE = "user_data.json"

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")

# ====== –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ======
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        user_data = json.load(f)
else:
    user_data = {}

# ====== –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π ======
articles = {
    "—Å–ø–æ—Ä—Ç": ["https://habr.com/ru/articles/123456/"],
    "–∫–Ω–∏–≥–∏": ["https://example.com/fantasy-world"],
    "–∫—Ä–∏–ø—Ç–∞": ["https://example.com/crypto101"]
}

# ====== –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ ======
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump({"user_data": user_data, "articles": articles}, f, ensure_ascii=False, indent=2)

# ====== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è ======
async def generate_challenge(category: str) -> str:
    prompt = f"–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'"
    try:
        challenge = generator(prompt, max_length=50, do_sample=True)[0]['generated_text']
        return challenge.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}"

# ====== –ö–æ–º–∞–Ω–¥—ã ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    if chat_id not in user_data:
        user_data[chat_id] = {"completed": {}, "notify_hour": 10, "daily_count": 2}
        save_data()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ üéØ\n"
        "–î–æ–±–∞–≤–ª—è–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ /add_category –∏ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –≤—Ä—É—á–Ω—É—é."
    )

async def add_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π /add_category –Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
    category = context.args[0].lower()
    for chat_id in user_data:
        user_data[chat_id]["completed"].setdefault(category, [])
    save_data()
    await update.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

async def add_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π /add_challenge –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–µ–∫—Å—Ç_–∑–∞–¥–∞–Ω–∏—è")
        return
    category = context.args[0].lower()
    text = " ".join(context.args[1:])
    user_data.setdefault(str(update.message.chat_id), {"completed": {}})
    user_data[str(update.message.chat_id)]["completed"].setdefault(category, []).append(text)
    save_data()
    await update.message.reply_text(f"–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'!")

async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π /time HH")
        return
    try:
        hour = int(context.args[0])
        if 0 <= hour <= 23:
            user_data[chat_id]["notify_hour"] = hour
            save_data()
            await update.message.reply_text(f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour}:00")
        else:
            await update.message.reply_text("–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23")
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23")

async def set_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π /count —á–∏—Å–ª–æ_–∑–∞–¥–∞–Ω–∏–π")
        return
    try:
        count = int(context.args[0])
        if 1 <= count <= 5:
            user_data[chat_id]["daily_count"] = count
            save_data()
            await update.message.reply_text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {count}")
        else:
            await update.message.reply_text("–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ—Ç 1 –¥–æ 5 –∑–∞–¥–∞–Ω–∏–π –≤ –¥–µ–Ω—å")
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

# ====== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ======
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    text = update.message.text.lower()
    if chat_id not in user_data:
        user_data[chat_id] = {"completed": {}, "notify_hour": 10, "daily_count": 2}
        save_data()
    if text in user_data[chat_id]["completed"]:
        challenge = await generate_challenge(text)
        user_data[chat_id]["completed"][text].append(challenge)
        save_data()
        article = random.choice(articles.get(text, [])) if articles.get(text) else "–ù–µ—Ç —Å—Ç–∞—Ç—å–∏"
        await update.message.reply_text(f"–ß–µ–ª–ª–µ–Ω–¥–∂ ({text}): {challenge}\n–°—Ç–∞—Ç—å—è: {article}")
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /add_category")

# ====== –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ======
async def daily_notifications(app):
    await asyncio.sleep(5)
    while True:
        now = datetime.now()
        for chat_id, data in user_data.items():
            target_hour = data.get("notify_hour", 10)
            next_run = datetime.combine(now.date(), time(target_hour, 0))
            if now.hour >= target_hour:
                next_run += timedelta(days=1)
            wait_seconds = (next_run - now).total_seconds()
            await asyncio.sleep(wait_seconds)

            count = data.get("daily_count", 2)
            for _ in range(count):
                if not data["completed"]:
                    continue
                category = random.choice(list(data["completed"].keys()))
                challenge = await generate_challenge(category)
                data["completed"][category].append(challenge)
                save_data()
                article = random.choice(articles.get(category, [])) if articles.get(category) else "–ù–µ—Ç —Å—Ç–∞—Ç—å–∏"
                await app.bot.send_message(chat_id=int(chat_id),
                                           text=f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ ({category}): {challenge}\n–°—Ç–∞—Ç—å—è: {article}")

# ====== –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ ======
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("add_category", add_category))
app.add_handler(CommandHandler("add_challenge", add_challenge))
app.add_handler(CommandHandler("time", set_time))
app.add_handler(CommandHandler("count", set_count))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# ====== –ó–∞–ø—É—Å–∫ ======
async def main():
    asyncio.create_task(daily_notifications(app))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

import asyncio
asyncio.run(main())
